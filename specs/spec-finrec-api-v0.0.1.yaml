openapi: 3.0.3
info:
  title: Отслеживание портфелей инвестиций
  description: 'Мы можем составить портфель из различных активов и следить за его динамикой'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: http://localhost
tags:
  - name: portfolio
    description: Портфолио
  - name: symbol
    description: Симболы для активов
  - name: asset
    description: Текущие состояние активов
  - name: trade
    description: История сделок по активам
paths:
  /portfolio/init:
    post:
      tags:
        - portfolio
      summary: Получить статус при инициализации
      operationId: initPortfolio
      requestBody:
        description: Объект запроса для инициализации при старте приложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitPortfolioRequest'
        required: true
      responses:
        200:
          description: all responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitPortfolioResponse'

  /portfolio/create:
    post:
      tags:
        - portfolio
      summary: Создание портфолио
      operationId: createPortfolio
      requestBody:
        description: Portfolio object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioRequest'
        required: true
      responses:
        200:
          description: All responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePortfolioResponse'

  /portfolio/read:
    post:
      tags:
        - portfolio
      summary: read portfolio
      operationId: readPortfolio
      requestBody:
        description: Portfolio id that needs to get from store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPortfolioRequest'
        required: true
      responses:
        200:
          description: All responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPortfolioResponse'
components:
  schemas:
    BaseMessage:
      type: object
      properties:
        messageType:
          type: string
      discriminator:
        propertyName: messageType

    BaseRequest:
      type: object
      properties:
        requestId:
          type: string
        debug:
          $ref: '#/components/schemas/BaseDebugRequest'

    BaseResponse:
      description: Базовый класс для всех ответов
      allOf:
        #        - $ref: '#/components/schemas/BaseMessage'
        - type: object
          properties:
            requestId:
              type: string
            result:
              type: string
              enum:
                - success
                - error
            errors:
              type: array
              items:
                $ref: '#/components/schemas/RequestError'

    RequestError:
      type: object
      properties:
        message:
          type: string
        field:
          type: string

    BaseDebugRequest:
      type: object
      description: Структура с описанием отладочных параметров запроса
      properties:
        mode:
          type: string
          enum:
            - prod
            - test
            - stub
        stub:
          type: string

    PortfolioVisibility:
      type: string
      description: 'Тип видимости портфолио. Возможные значения: видит только владелец, только зарегистрированный в системе пользователь, видимо всем'
      enum:
        - ownerOnly
        - registeredOnly
        - public

    CreatablePortfolio:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        totalVolume:
          type: string
          readOnly: true
          description: Общая стоимость всех активов в портфолио
        #              todo: создать структуру для активов
        assets:
          type: array
          items:
            type: object
            properties:
              #              todo: создать структуру для тикера
              ticker:
                type: string
                description: 'Тикер пример: USD; EUR; RUB'
              volume:
                type: string
                description: объем

        userId:
          type: integer
          description: user id
          format: int64
        visibility:
          $ref: '#/components/schemas/PortfolioVisibility'

    UpdatablePortfolio:
      allOf:
        - $ref: '#/components/schemas/CreatablePortfolio'
        - type: object
          properties:
            id:
              type: integer
              format: int64

    ResponsePortfolio:
      description: Структура, описывающая портфолио в ответе
      allOf:
        - $ref: '#/components/schemas/UpdatablePortfolio'
        - type: object
          properties:
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/PortfolioPermissions'

    UpdatePortfolioResponse:
      description: Структура для ответа на запрос с информацией об объявлении
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            updatedPortfolio:
              $ref: '#/components/schemas/ResponsePortfolio'

    UpdatePortfolioRequest:
      description: Структура для запроса обновления существующего объявления
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            createPortfolio:
              $ref: '#/components/schemas/UpdatablePortfolio'
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyTitle
                        - databaseError

    PortfolioPermissions:
      type: string
      enum:
        - read
        - update
        - delete
        - send

    CreatePortfolioRequest:
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            createPortfolio:
              $ref: '#/components/schemas/CreatablePortfolio'
            debug:
              type: object
              properties:
                stub:
                  type: string
                  enum:
                    - success
                    - nameEmpty
                    - errorDb

    CreatePortfolioResponse:
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            createdPortfolio:
              $ref: '#/components/schemas/ResponsePortfolio'

    ReadPortfolioRequest:
      description: Структура для получения портфолио
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            readPortfolioId:
              type: integer
              format: int64
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError

    ReadPortfolioResponse:
      description: Структура для ответа на запрос с информацией об портфолио
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            readPortfolio:
              $ref: '#/components/schemas/ResponsePortfolio'

    InitPortfolioRequest:
      description: Структура для запроса начального состояния при старте вэб-клиента
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'

    InitPortfolioResponse:
      description: Структура для ответа с начальным состоянием при старте вэб-клиента
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object

    DeletePortfolioRequest:
      description: Структура для запроса удаления портфолио
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            deletePortfolioId:
              type: integer
              format: int64
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError

    BasePaginatedResponse:
      type: object
      description: Структура с описанием страницы в ответе
      properties:
        size:
          type: integer
          description: Размер запрашиваемой страницы
          format: int32
        lastId:
          type: integer
          format: int64
          description: Идентификатор последнего объекта предыдущей страницы
        position:
          type: string
          enum:
            - first
            - middle
            - last

    BasePaginatedRequest:
      type: object
      description: Структура с описанием запрашиваемой страницы в запросах списков
      properties:
        size:
          type: integer
          description: Размер запрашиваемой страницы
          format: int32
        lastId:
          type: integer
          format: int64
          description: Идентификатор последнего объекта предыдущей страницы

    DeletePortfolioResponse:
      description: Структура для ответа на запрос об удалении портфолио
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            deletedPortfolio:
              $ref: '#/components/schemas/ResponsePortfolio'

    SearchPortfolioRequest:
      description: Структура для запроса поиска объявлений
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            page:
              $ref: '#/components/schemas/BasePaginatedRequest'

    SearchPortfolioResponse:
      description: Структура для ответа на запрос поиска объявлений
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            page:
              $ref: '#/components/schemas/BasePaginatedResponse'
            foundPortfolios:
              type: array
              items:
                $ref: '#/components/schemas/ResponsePortfolio'